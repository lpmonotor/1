/** author:
*  - Veaceslav Grimalschi - https://vk.com/grimalschi
*  - Aleksandr Holomozyi - https://vk.com/sandergol
*/

'use strict';
var vScript = '0.24';
console.log('vScript: ', vScript);
var users = '2line';  // 1line, 2line
console.log('Role in script: ', users);
var name = localStorage.getItem('nameAgent'); // Имя агента
var recScriptVersion = localStorage.getItem('support_version'); // Записанная версия скрипта

// ФИЛЬТР ПО СТРАНИЦАМ
var location_include;
var intercom_filter_url;
var adm_platformalp;
var amd_platformalp;
var intercom_respond;

function parselink() {
  if (location_include = window.location.href.length) {
    location_include = window.location.href;
    intercom_filter_url = location_include.search('intercom');
    adm_platformalp = location_include.search('adm.platformalp.ru');
    amd_platformalp = location_include.search('amd.platformalp.ru');
    intercom_respond = location_include.search('inbox'); // Фильтр на тикетах
  } else {
    console.log('ERROR - location_include');
    setTimeout(tryToFind, 60);
  }
};
parselink();


// ФУНКЦИИ ИНТЕРКОМА
setTimeout(function() {
  if (intercom_filter_url !== -1) {
    // ПОЛУЧЕНИЕ ИМЕНИ АГЕНТА И ОТПРАВКА СТАТИСТИЧЕСКОЙ ИНФОРМАЦИИ
    let verify;

    if (name) { // Проверить верно ли записано имя
      verify = name.search(/Not true value in the array/);
      if (verify === -1) {
        verify = name.search(/id:/g);
        if (verify !== -1) {
          console.log('NameItem: ', name);
        }
      }
    }

    if (!name || verify <= 0) { // Парсить если имени нет или оно записано не верно
      // Подбор ключа для доступа к массиву с данными
      for (let count = 0; count < localStorage.length; count++) {
        let myKey = localStorage.key(count).trim();
        let keySearch = myKey.search('EMBER_MODEL_DATA_CACHE::admin::');

        if (keySearch === 0) {
          name = localStorage.getItem(myKey); // Запрос данных из ключа
          let agentId = myKey.replace(/\D/g, ''); // Получить id
          let myName = name.split(',')[1].split(/:/)[1].replace(/"/g, ''); // Получить имя
          verify = myName.search(/\d/g); // Проверить, что здесь нет чисел, то есть указаны только буквы

          if (verify === -1 && myName !== '') {
            name = myName + ' id:' + agentId;
            localStorage.setItem('nameAgent', name); // Записать имя агента в статистический ключ
            console.log('NameParse: ', name);
            getVersion(name);
          } else if (verify !== -1) {
            name = 'Not true value in the array:' + agentId;
            console.log('NameParse: ', name);
            getVersion(name);
          }

          break;
        } else {
          name = 'Key not found';
          console.log('NameParse: ', name);
          getVersion(name);
        }
      }
    } else if (vScript !== recScriptVersion) {
      getVersion(name);
    }
    // Отправка информации о версии скрипта
    function getVersion(name) {
      let support_version = localStorage.getItem('support_version');

      if (support_version !== vScript) {
        function getBrowser() {
          let ua = navigator.userAgent;

          let browserName = function() {
            if (ua.search(/Edge/) > -1) return "EDGE";
            if (ua.search(/Firefox/) > -1) return "Firefox";
            if (ua.search(/Opera/) > -1) return "Opera";
            if (ua.search(/OPR/) > -1) return "OperaWebkit";
            if (ua.search(/YaBrowser/) > -1) return "Ya.Browser";
            if (ua.search(/Chrome/) > -1) return "Chrome";
            if (ua.search(/Safari/) > -1) return "Safari";
          }();

          let version;
          switch (browserName) {
            case "EDGE":
              version = (ua.split("Edge")[1]).split("/")[1];
              break;
            case "Firefox":
              version = ua.split("Firefox/")[1];
              break;
            case "Opera":
              version = ua.split("Version/")[1];
              break;
            case "OperaWebkit":
              browserName = "Opera";
              version = ua.split("OPR/")[1];
              break;
            case "Ya.Browser":
              version = (ua.split("YaBrowser/")[1]).split(" ")[0];
              break;
            case "Chrome":
              version = (ua.split("Chrome/")[1]).split(" ")[0];
              break;
            case "Safari":
              version = (ua.split("Version/")[1]).split(" ")[0];
              break;
          }

          return browserName + ' ' + version;
        }

        let data = {
            version: vScript,
            name: name,
            channel: 'closed',
            msg: 'Версия: ' + vScript + '; Роль: ' + users + '; Browser: ' + getBrowser(),
        };

        localStorage.setItem('support_version', vScript); // Записать новую версию скрипта

        // Передать информацию на сервер
        let path = btoa(unescape(encodeURIComponent(JSON.stringify(data))));
        $('<img src="http://support.lpteam.ru/reporter.php/?data=' + path + '">');
      }
    }


    // РЕАКЦИЯ НА ВЫДЕЛЕНИЕ ТЕКСТА
    function getSelectedText() {
      if (window.getSelection) {
        return window.getSelection().toString();
      } else if (document.selection) {
        return document.selection.createRange().text;
      }
        return '';
    }


    // ДЛЯ КАСТОМНЫХ СТИЛЕЙ
    $('head').append('<style class="myStyle"></style>');


    // ПРАВИЛА СОРТИРОВКИ ТИКЕТОВ В КАНАЛАХ
    setInterval(function () {
      if (users === '2line') return;

      // Получение имени канала
      let select_channel = $('[role="application"] [class*="submenu__sections"] .nav-vertical__link.o__selected').attr('data-content');
      if (select_channel) {
        select_channel = select_channel.trim();

        let channel_1line = select_channel.search(/Первая линия/);
        let channel_2line = select_channel.search(/Вторая линия/);
        let channel_voc = select_channel.search(/VOC&Финансы/);
        let channel_lp = select_channel.search(/Платформа LP/);
        let channel_cooperation = select_channel.search(/Сотрудничество/);

        // Выполнить если получено соответствующее имя канала
        if (channel_1line === 0 || channel_2line === 0 || channel_voc === 0 || channel_lp === 0 || channel_cooperation === 0) {
          let is_open = $('.conversation__inbox__list-filter .u__left [class*="custom-select__box"] svg path[fill-rule="evenodd"]').is('[fill-rule="evenodd"]'); // Получение информации о том, что открыт точно Open

          if (is_open) {
            let filter = $('.conversation__inbox__list-filter .u__right .f__custom-select__box').text().trim().search('Wait'); // Получение информации о текущей сортировке (значение не всегда может соответствовать Waiting longest, потому фильтр по совпадению)

            if (filter !== 0) {
              // Клик по сортировке, только если тикет НЕ выделен Чекбоксом
              let $sorting = $('.conversation__inbox__list-filter.u__cf span').attr('class');  // Должно быть точно "u__relative ember-view"

              if ($sorting === 'u__relative ember-view') {
                $('.conversation__inbox__list-filter .u__right .f__custom-select').click();
                $('[class*="sort-by"]').last().click();
              }
            }
          }
        }
      }
    }, 500);


    // ОПРЕДЕЛЕНИЕ ВКЛЮЧЕНА ИЛИ ОТКЛЮЧЕНА ФУНКЦИЯ ВЫСВОБОЖДЕНИЯ ПРОСТРАНСТВА ПОД ТИКЕТ
    let modify_intercom_style = localStorage.getItem('modify_intercom_style');

    // Если ключ еще не записан, то запишу его
    if (!modify_intercom_style) {
      localStorage.setItem('modify_intercom_style', 'on'),
      modify_intercom_style = 'on';
    }

    // ОПРЕДЕЛЕНИЕ СТИЛЕЙ
    // Панель в тикете, с кнопкой "Closed/Reopen"
    let myStyleCloseReopenOn = ' .layout__box.o__has-rows[class*="inbox"] .inbox__card__header.layout__media.o__center.ember-view {padding: 0px 10px!important; min-height: 33px!important; z-index: 3!important;} ';
    let myStyleCloseReopenOff = ' .layout__box.o__has-rows[class*="inbox"] .inbox__card__header.layout__media.o__center.ember-view {/*padding: 0px 10px!important; min-height: 33px!important;*/ z-index: 3!important;} ';
    // Панель выбора тикета
    let myStyleChoiceTicketsOn = ' .conversation__inbox__list-header {height: 32px!important;} .conversation__inbox__list-filter.o__vertical-nav {padding: 0px 7px!important;} .conversation__inbox__list-filter.o__vertical-nav .f__custom-select__caret {top: 3px!important;} .conversation__inbox__list-filter.u__cf .f__custom-select__box {padding: 3px 30px 5px 12px!important;} .conversation__inbox__list.o__vertical-nav {top: 62px!important;} ';
    let myStyleChoiceTicketsOff = ' .conversation__inbox__list-header {/*height: 32px!important;*/} .conversation__inbox__list-filter.o__vertical-nav {/*padding: 0px 7px!important;*/} .conversation__inbox__list-filter.o__vertical-nav .f__custom-select__caret {/*top: 3px!important;*/} .conversation__inbox__list-filter.u__cf .f__custom-select__box {/*padding: 3px 30px 5px 12px!important;*/} .conversation__inbox__list.o__vertical-nav {/*top: 62px!important;*/} ';

    // Высвобождение пространства под тикет
    if (modify_intercom_style === 'on') {
      document.getElementsByClassName('myStyle')[0].innerHTML += myStyleCloseReopenOn; // Панель в тикете, с кнопкой "Closed/Reopen"
      document.getElementsByClassName('myStyle')[0].innerHTML += myStyleChoiceTicketsOn; // Панель выбора тикета
    } else {
      document.getElementsByClassName('myStyle')[0].innerHTML += myStyleCloseReopenOff; // Панель в тикете, с кнопкой "Closed/Reopen"
      document.getElementsByClassName('myStyle')[0].innerHTML += myStyleChoiceTicketsOff; // Панель выбора тикета
    }

    // Добавить кнопку переключения вида если она еще не была добавлена
    let $is_minimize = $('body.ember-application.ember-ready .minimize_pannel').is('.minimize_pannel'); // Уже добавлено?
    if (!$is_minimize) {
      if (modify_intercom_style === 'on') {
        $('body.ember-application.ember-ready').append('<div class="minimize_pannel" style="position: fixed; width: 10px; height: 10px; bottom: 1px; left: 50px; z-index: 2147483648; background-color: rgba(76, 175, 80, 0.3);"></div>');
      } else {
        $('body.ember-application.ember-ready').append('<div class="minimize_pannel" style="position: fixed; width: 10px; height: 10px; bottom: 1px; left: 50px; z-index: 2147483648; background-color: rgba(229, 55, 52, 0.3);"></div>');
      }
    }

    // Функция переключения высвобождения пространства
    $('.minimize_pannel').dblclick(function() {

      // Получить данные из кастомных стилей
      function myStyleGet() {
        return document.getElementsByClassName('myStyle')[0].innerHTML;
      }

      if (modify_intercom_style === 'on') {
        localStorage.setItem('modify_intercom_style', 'off');
        modify_intercom_style = 'off';

        document.getElementsByClassName('myStyle')[0].innerHTML = myStyleGet().replace(myStyleCloseReopenOn, myStyleCloseReopenOff).replace(myStyleChoiceTicketsOn, myStyleChoiceTicketsOff);
        $('.minimize_pannel').css('background-color', 'rgba(229, 55, 52, 0.3)'); // Изменить цвет переключателя на красный

        // Изменить отступ сверху у маячка с количеством тикетов
        let countLevel = $('.counter_channel').css('top');
        if (countLevel === '7px') {
          $('.counter_channel').css('top', '22px');
        } else {
          $('.counter_channel').remove();
        }
      } else {
        localStorage.setItem('modify_intercom_style', 'on');
        modify_intercom_style = 'on';

        document.getElementsByClassName('myStyle')[0].innerHTML = myStyleGet().replace(myStyleCloseReopenOff, myStyleCloseReopenOn).replace(myStyleChoiceTicketsOff, myStyleChoiceTicketsOn);
        $('.minimize_pannel').css('background-color', 'rgba(76, 175, 80, 0.3)'); // Изменить цвет переключателя на зеленый

        // Изменить отступ сверху у маячка с количеством тикетов
        let countLevel = $('.counter_channel').css('top');
        if (countLevel === '22px') {
          $('.counter_channel').css('top', '7px');
        } else {
          $('.counter_channel').remove();
        }
      }
    });


    // ОТОБРАЗИТЬ НАЛИЧИЕ, КОЛИЧЕСТВО ТИКЕТОВ НА ПЕРВОЙ/ВТОРОЙ И ВОСПРОИЗВЕСТИ ЗВУК ПРИ ПОЯВЛЕНИИ ТИКЕТА
    let counter_channel = ''; // Счетчик тикетов
    let playWarning = 0; // Значение постоянно увеличивается и сбрасывается на 0, если текущее количество тикетов равно нулю
    let name_channel; // Имя канала
    let avatar_channel; // Логотип канала

    if (users === '1line') {
      name_channel = 'Первая линия';
      avatar_channel = '//static.intercomassets.com/team-avatars/1f495.png';
    } else {
      name_channel = 'Вторая линия СП';
      avatar_channel = '//static.intercomassets.com/team-avatars/1f525.png';
    }

    setInterval(function() {
      let selector_value = '[role="application"] .submenu__sections__section__items a[data-content="' + name_channel + '"] [class*="count"]'; // Путь по которому нужно получить число

      let counter_line = $(selector_value).is('[class*="count"]'); // Если true, значит здесь есть число, иначе число получить не удалось
      if (counter_line) {
        counter_line = +$(selector_value).text().trim(); // Получение количества в виде числа
      } else {
        counter_line = -1;
      }

      let search_counter = document.getElementsByClassName('counter_channel')[0]; // Счетчик уже добавлен?
      let $add_counter = $('.conversations_inbox .skiptranslate .conversation__inbox__list-header.o__has-columns'); // Путь для добавления
      let ticket_list = $add_counter.is($add_counter); // Добавить счетчик если в списке тикетов

      if (ticket_list) {
        let top_button; // Какой отсутп сверху будет у подсветки
        if (modify_intercom_style === 'on') {
          top_button = '7px';
        }
        else if (modify_intercom_style === 'off') {
          top_button = '22px';
        }

        if (counter_channel !== counter_line || search_counter === undefined) { // Если предыдущее количество не равно текущему
          if (search_counter !== undefined) {
            search_counter.remove();
          }

          if (counter_line === 0) {
            $add_counter.append('<span class="counter_channel" align="center" style="display: block; position: absolute; height: 20px; width: 20px; top: ' + top_button + '; left: 85%; background-image: url(' + avatar_channel + '); background-size: contain; cursor: pointer;"><span style="display: block; position: relative; height: 100%; width: 100%;  background-color: rgba(255, 255, 255, 0.7); font-weight: bold; font-size: 15px; -webkit-user-select: none; -moz-user-select: none;">' + counter_line + '</span></span>');
          } else if (counter_line <= 5) {
            $add_counter.append('<div class="counter_channel"><span align="center"><span style="display: block; position: relative; height: 100%; width: 100%;  background-color: rgba(255, 255, 255, 0.7); font-weight: bold; font-size: 20px; -webkit-user-select: none; -moz-user-select: none;">' + counter_line + '</span></span><style>.counter_channel > span {-webkit-animation: pulse 3s linear infinite; transition: top 3s ease-out 3s; display: block; position: absolute; height: 20px; width: 20px; top: ' + top_button + '; left: 85%; background-image: url(' + avatar_channel + '); background-size: contain; cursor: pointer;} @-webkit-keyframes pulse {from {height: 20px; width: 20px; left: 85%;} to {height: 25px; width: 25px; left: 80%;}}</style></div>');
          } else if (counter_line > 5) {
            $add_counter.append('<div class="counter_channel"><span align="center"><span style="display: block; position: relative; height: 100%; width: 100%;  background-color: rgba(255, 255, 255, 0.7); font-weight: bold; font-size: 30px; -webkit-user-select: none; -moz-user-select: none;">' + counter_line + '</span></span><style>.counter_channel > span {-webkit-animation: pulse 1s linear infinite; transition: top 1s ease-out 1s; display: block; position: absolute; height: 20px; width: 20px; top: ' + top_button + '; left: 85%; background-image: url(' + avatar_channel + '); background-size: contain; cursor: pointer;} @-webkit-keyframes pulse {from {height: 20px; width: 20px; left: 85%;} to {height: 25px; width: 25px; left: 80%;}}</style></div>');
          }

          // Наращивать число в playWarning или сбросить на ноль при условии, что и counter_line равно нулю, а также воспроизводить звук при наращивании playWarning
          if (counter_line > playWarning) {
            playWarning = counter_line;

            // Проверка был ли уже добавлен звук
            let isWarning = $('body .myAudio').is('.myAudio');

            if (!isWarning) {
              $('body').append('<audio style="display: none;" id="myAudio" src="https://d.zaix.ru/7PqN.mp3" volume="-8000" controls autoplay></audio>');
              document.getElementById('myAudio').volume -= 0.7; // Громкость на 30%
              setTimeout(function() {
                $('#myAudio').remove();
              }, 1501);
            }
          } else if (counter_line <= 0) {
            playWarning = 0;
          }

          // Переключиться на свой канал при клике на подсветку
          $('.counter_channel').dblclick(function() {
            $('a[data-content="' + name_channel + '"]').click();
          });

          counter_channel = counter_line; // Записать информацию о количестве тикетов для сравнения
        }
      }
    }, 500);


    // ПОДСВЕТКА В ТИКЕТЕ С КАКОГО РАЗДЕЛА ПИШЕТ КЛИЕНТ
    setInterval(function() {
      $('.conversation__stream.u__relative .conversation__part [class*="user"], .card__expanded-content .conversation__part [class*="user"]').each(function() {
        var page_treatment = $(this).find('a[rel="noopener"]').attr('href'); // Получить ссылку
        // console.log('page_treatment:', page_treatment);

        // Если ссылка не получена - ничего не делать
        if (page_treatment) {

          let delete_utm = new URL(page_treatment);
          page_treatment = page_treatment.replace(delete_utm.search, '');

          let redactor = page_treatment.search(/redactor/);         // Редактор страницы
          let page_edit = page_treatment.search(/page-edit/);       // Настройки страницы
          let page_restore = page_treatment.search(/page-restore/); // История страницы
          let leads = page_treatment.search(/leads/);               // Заявки страницы
          let stats = page_treatment.search(/stats/);               // Статистика страницы
          let page_report = page_treatment.search(/page-report/);   // Сводка страницы
          let pages = page_treatment.search(/pages/);               // Раздел "Страницы"
          let integration = page_treatment.search(/integration/);   // Раздел "Интеграции" и ID интеграции
          let domains = page_treatment.search(/domain/);            // Раздел "Домены"
          let money = page_treatment.search(/money/);               // Раздел "Оплатить тариф"
          let bill = page_treatment.search(/bill/);                 // Оплата и номер счета если есть
          let bonus = page_treatment.search(/bonus/);               // Раздел "Партнерка"
          let transfers = page_treatment.search(/transfers/);       // Раздел "Трансфер"
          let contacts = page_treatment.search(/contacts/);         // Раздел "Контакты"
          let user = page_treatment.search(/user/);                 // Раздел "Пользователи"
          let profile = page_treatment.search(/profile/);           // Раздел "Профиль"
          let page_create = page_treatment.search(/page-create/);   // Создание страницы
          let home = page_treatment.search(/app.platformalp.ru/);   // На главной

          let text_added = $(this).find('.editor_link').text();     // Текст уже добавлен?

          let for_adding = '.t__light-text.c__lightest[class*="meta"].u__left'; // Путь для добавления подсветки
          let adminLink = 'https://amd.platformalp.ru/';               // Ссылка на админку

          // Редактор страницы
          if (redactor !== -1) {
            let redactor_search = text_added.search(/Редактор/); // Проверить был ли уже добавлен текст

            if (redactor_search !== 0) {
              // Получение ID страницы
              let redactor_id = page_treatment.substr(redactor);
              let link_arr = redactor_id.split('/');

              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text"><a class="c__deemphasized-text editor_link" href="' + page_treatment + '" target="_blank" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Редактор</a> <a href="' + adminLink + '?page=' + link_arr[1] + '&section=pages" target="_blank" style="color: rgb(229,55,52);">ID</a>:' + link_arr[1] + '</span>');
            }
          }

          // Настройки страницы
          if (page_edit !== -1) {
            let page_edit_search = text_added.search(/Настройки/); // Проверить был ли уже добавлен текст

            if (page_edit_search !== 0) {
              // Получение ID страницы
              let page_edit_id = page_treatment.substr(page_edit);
              let page_edit_arr = page_edit_id.split('/');

              let done_url = page_treatment.replace(page_edit_id, 'redactor/' + page_edit_arr[1]); // Формирование ссылки на редактор

              let settings_partition; // Содержит имя найденного раздела

              // С какого раздела настроек страницы написали
              let domain = page_treatment.search(/\?tab=domain/);                 // Настройки домена
              let base = page_treatment.search(/\?tab=base/);                     // Общие
              let seo = page_treatment.search(/\?tab=seo/);                       // Поисковая оптимизация
              let notify = page_treatment.search(/\?tab=notify/);                 // Контакты
              let favicon = page_treatment.search(/\?tab=favicon/);               // Иконка (favicon)
              let shop = page_treatment.search(/\?tab=shop/);                     // Настройки магазина
              let social_network = page_treatment.search(/\?tab=social-network/); // Мета теги для соц. сетей
              let redirect = page_treatment.search(/\?tab=redirect/);             // Переадресация
              let remove_history = page_treatment.search(/\?tab=remove-history/); // Удалить историю
              let access = page_treatment.search(/\?tab=access/);                 // Настройки доступа
              let plugins = page_treatment.search(/\?tab=plugins/);               // Метрика и скрипт (Плагины)

              // Определение найденного раздела
              if (domain !== -1)          settings_partition = 'Домена';
              if (base !== -1)            settings_partition = 'Общие';
              if (seo !== -1)             settings_partition = 'СЕО';
              if (notify !== -1)          settings_partition = 'Контактов';
              if (favicon !== -1)         settings_partition = 'Иконки';
              if (shop !== -1)            settings_partition = 'Магазина';
              if (social_network !== -1)  settings_partition = 'Мета тегов';
              if (redirect !== -1)        settings_partition = 'Переадресации';
              if (remove_history !== -1)  settings_partition = 'Удаление истории';
              if (access !== -1)          settings_partition = 'Доступа';
              if (plugins !== -1)         settings_partition = 'Плагинов';

              // Если метка не найдена, значит раздел По умолчанию - Настройки домена
              if ((domain === -1) && (base === -1) && (seo === -1) && (notify === -1) && (favicon === -1) && (shop === -1) && (social_network === -1) && (redirect === -1) && (remove_history === -1) && (access === -1) && (plugins === -1)) {
                settings_partition = 'Домена';
              }

              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text"><a class="c__deemphasized-text editor_link" href="' + done_url + '" target="_blank" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Настройки</a><span style="color: rgb(0,50,80); font-size: initial; font-weight: 500;"> (' + settings_partition + ')</span> <a href="' + adminLink + '?page=' + page_edit_arr[1] + '&section=pages" target="_blank" style="color: rgb(229,55,52);">ID</a>:' + page_edit_arr[1] + '</span>');
            }
          }

          // История страницы
          if (page_restore !== -1) {
            let page_restore_search = text_added.search(/История/); // Проверить был ли уже добавлен текст

            if (page_restore_search !== 0) {
              // Получение ID страницы
              let page_restore_id = page_treatment.substr(page_restore);
              let page_restore_arr = page_restore_id.split('/');

              // Формирование ссылки на редактор
              let done_url = page_treatment.replace(page_restore_id, 'redactor/' + page_restore_arr[1]);

              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text"><a class="c__deemphasized-text editor_link" href="' + done_url + '" target="_blank" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">История</a> <a href="' + adminLink + '?page=' + page_restore_arr[1] + '&section=pages" target="_blank" style="color: rgb(229,55,52);">ID</a>:' + page_restore_arr[1] + '</span>');
            }
          }

          // Заявки страницы
          if (leads !== -1) {
            let leads_search = text_added.search(/Заявки/i); // Проверить был ли уже добавлен текст

            if (leads_search === -1) {
              // Получение ID страницы
              let leads_id = page_treatment.substr(leads);
              let leads_arr = leads_id.split('/');

              // Формирование ссылки на редактор
              let done_url = page_treatment.replace(leads_id, 'redactor/' + leads_arr[1].replace(/\?id=/, ''));

              // Добавление подсветки
              if ((leads_arr[1] !== '') && (leads_arr[1] !== 'list')) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text"><a class="c__deemphasized-text editor_link" href="' + done_url + '" target="_blank" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Заявки</a> <a href="' + adminLink + '?page=' + leads_arr[1].replace(/\?id=/, '') + '&section=leads" target="_blank" style="color: rgb(229,55,52);">ID</a>:' + leads_arr[1].replace(/\?id=/, '') + '</span>');
              } else {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Общие заявки</span>');
              }
            }
          }

          // Статистика страницы
          if (stats !== -1) {
            let stats_search = text_added.search(/Статистика/i); // Проверить был ли уже добавлен текст

            if (stats_search === -1) {
              // Получение ID страницы
              let stats_id = page_treatment.substr(stats);
              let stats_arr = stats_id.split('/');

              // Формирование ссылки на редактор
              let done_url = page_treatment.replace(stats_id, 'redactor/' + stats_arr[1].replace(/\?id=/, ''));

              // Добавление подсветки
              if (stats_arr[1] !== '') {
                $(this).find(for_adding).append('<span class="c__deemphasized-text"><a class="c__deemphasized-text editor_link" href="' + done_url + '" target="_blank" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Статистика</a> <a href="' + adminLink + '?page=' + stats_arr[1].replace(/\?id=/, '') + '&section=pages" target="_blank" style="color: rgb(229,55,52);">ID</a>:' + stats_arr[1].replace(/\?id=/, '') + '</span>');
              } else {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Общая статистика</span>');
              }
            }
          }

          // Сводка страницы
          if (page_report !== -1) {
            let page_report_search = text_added.search(/Сводка/); // Проверить был ли уже добавлен текст

            if (page_report_search === -1) {
              // Получение ID страницы
              let page_report_id = page_treatment.substr(page_report);
              let page_report_arr = page_report_id.split('/');

              // Формирование ссылки на редактор
              let done_url = page_treatment.replace(page_report_id, 'redactor/' + page_report_arr[1].replace(/\?id=/, ''));

              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text"><a class="c__deemphasized-text editor_link" href="' + done_url + '" target="_blank" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Сводка</a> <a href="' + adminLink + '?page=' + page_report_arr[1].replace(/\?id=/, '') + '&section=pages" target="_blank" style="color: rgb(229,55,52);">ID</a>:' + page_report_arr[1].replace(/\?id=/, '') + '</span>');
            }
          }

          // Раздел "Страницы"
          if (pages !== -1) {
            let pages_search = text_added.search(/Страницы/); // Проверить был ли уже добавлен текст

            if (pages_search === -1) {
              // Проверить, что это не старая ссылка на редактор страницы
              let pages_id = page_treatment.substr(pages);
              let pages_arr = pages_id.split('/');

              // Добавление подсветки
              if (pages_arr[1] !== 'redactor') {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Страницы</span>');
              }
            }
          }

          // Раздел "Интеграции" и ID интеграции
          if (integration !== -1) {
            let integration_search = text_added.search(/Интеграц/i); // Проверить был ли уже добавлен текст

            if (integration_search === -1) {
              // Получение ID интеграции
              let integration_id = page_treatment.substr(integration);
              let integration_arr = integration_id.split('/');

              // Добавление подсветки
              if ((integration_arr[0] === 'integrations') && (integration_arr[1] === undefined)) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Интеграции</span>');
              }
              else if (integration_arr[1] === 'list') {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Интеграции</span>');
              }
              if ((integration_arr[0] === 'integration-create') && (integration_arr[1] === undefined)) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Создание интеграции</span>');
              }
              else if (integration_arr[1] === 'create') {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Создание интеграции</span>');
              }
              if ((integration_arr[0] === 'integration-edit') && (integration_arr[1] !== undefined)) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text"><span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Интеграция</span> ID:' + integration_arr[1] + '</span>');
              }
            }
          }

          // Раздел "Домены"
          if (domains !== -1) {
            let domains_search = text_added.search(/Домен/i); // Проверить был ли уже добавлен текст

            if (domains_search === -1) {
              // Получение ID интеграции
              let domains_id = page_treatment.substr(domains);
              let domains_arr = domains_id.split('/');

              // Добавление подсветки
              if ((domains_arr[0] === 'domains') && (domains_arr[1] === undefined)) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Домены</span>');
              }
              if ((domains_arr[0] === 'domain') && (domains_arr[1] === 'create')) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Создание домена</span>');
              }
            }
          }

          // Раздел "Оплатить тариф"
          if (money !== -1) {
            let money_search = text_added.search(/тариф/i); // Проверить был ли уже добавлен текст

            if (money_search === -1) {
              // В разделе "Изменить тариф"?
              let money_id = page_treatment.substr(money);
              let money_arr = money_id.split('/');

              // Добавление подсветки
              if (money_arr[1] === '1') {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Изменить тариф</span>');
              } else {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Оплатить тариф</span>');
              }
            }
          }

          // Оплата и номер счета если есть
          if (bill !== -1) {
            let bill_search = text_added.search(/Оплата/i); // Проверить был ли уже добавлен текст

            if (bill_search === -1) {
              // Получение информации об оплате: домена / существующего счета / продлении
              let bill_id = page_treatment.substr(bill);
              let bill_domain = bill_id.search(/domain/i);
              let bill_prolong = bill_id.search(/prolong/i);
              let bill_arr = bill_id.split('/');
              let number_score_search = bill_arr[1].search(/[a-z]/ig); // Если не "-1", значит это не id/номер_счета
              let count_number = bill_arr[1].length;

              // Добавление подсветки
              if ((bill_domain !== -1) && (number_score_search < 0)) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text"><span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Оплата домена</span> <a href="https://adm.platformalp.ru/?search=s%3A' + bill_arr[1] + '#tabBills" target="_blank" style="color: rgb(229,55,52); font-size: 19px;">s</a>:' + bill_arr[1] + '</span>');
              }
              if (bill_prolong !== -1) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Оплата продления</span>');
              }
              if ((bill_domain === -1) && (bill_prolong === -1) && (count_number === 2)) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Оплата счета</span>');
              }
              if ((bill_domain === -1) && (bill_prolong === -1) && (count_number > 2) && (number_score_search < 0)) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text"><span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Оплата счета</span> <a href="https://adm.platformalp.ru/?search=s%3A' + bill_arr[1] + '#tabBills" target="_blank" style="color: rgb(229,55,52); font-size: 19px;">s</a>:' + bill_arr[1] + '</span>');
              }
            }
          }

          // Раздел "Партнерка"
          if (bonus !== -1) {
            let bonus_search = text_added.search(/Партнерка/i); // Проверить был ли уже добавлен текст

            if (bonus_search === -1) {
              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Партнерка</span>');
            }
          }

          // Раздел "Трансфер"
          if (transfers !== -1) {
            let transfers_search = text_added.search(/Трансфер/i); // Проверить был ли уже добавлен текст

            if (transfers_search === -1) {
              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Трансфер</span>');
            }
          }

          // Раздел "Контакты"
          if (contacts !== -1) {
            let contacts_search = text_added.search(/Контакты/i); // Проверить был ли уже добавлен текст

            if (contacts_search === -1) {
              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Контакты</span>');
            }
          }

          // Раздел "Пользователи"
          if (user !== -1) {
            let user_search = text_added.search(/Польз/i); // Проверить был ли уже добавлен текст

            if (user_search === -1) {
              // Раздел пользователи или добавление пользователя?
              let user_info = page_treatment.substr(user);
              let user_arr = user_info.split('/');

              // Добавление подсветки
              if (user_arr[1] === 'create') {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Добавление пользователя</span>');
              }
              else if (user_arr[1] === undefined) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Пользователи</span>');
              }
              if ((user_arr[2] !== undefined) && (user_arr[2] !== '') && (user_arr[1] !== 'page-edit')) {
                $(this).find(for_adding).append('<span class="c__deemphasized-text"><span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Настройки прав польз.</span> <a href="https://adm.platformalp.ru/list/user/' + user_arr[2] + '" target="_blank" style="color: rgb(229,55,52);">ID</a>:' + user_arr[2] + '</span>');
              }
            }
          }

          // Раздел "Профиль"
          if (profile !== -1) {
            let profile_search = text_added.search(/Профиль/i); // Проверить был ли уже добавлен текст

            if (profile_search === -1) {
              let profile_money = page_treatment.substr(profile);
              let profile_arr = profile_money.split('/');

              // Добавление подсветки
              if (profile_arr[1] !== 'money') {
                $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Профиль</span>');
              }
            }
          }

          // Создание страницы
          if (page_create !== -1) {
            let page_create_search = text_added.search(/Создание страницы/i); // Проверить был ли уже добавлен текст

            if (page_create_search === -1) {
              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">Создание страницы</span>');
            }
          }

          // На главной
          if (home === -1) {
            let home_search = text_added.search(/На главной/i); // Проверить был ли уже добавлен текст

            if (home_search === -1) {
              // Добавление подсветки
              $(this).find(for_adding).append('<span class="c__deemphasized-text editor_link" style="color: rgb(0,200,100); font-size: initial; font-weight: 500; margin-left: 5px;">На главной</span>');
            }
          }
        }
      });
    }, 1000);


    // ДОБАВИТЬ "NEW" К ТЕМ ТИКЕТАМ, ГДЕ ЕСТЬ ОТВЕТ ОТ КЛИЕНТА
    setInterval(function() {
      $('.js__inbox-list-item .conversation__list__item__summary .layout__media.o__center').each(function() {
        let admin_message = $(this).find('.o__admin-note, .o__admin-comment').is('.o__admin-note, .o__admin-comment'); // Есть комментарий агента или заметка агента
        let typing = $(this).find('[class*="is-typing"]').is('[class*="is-typing"]'); // Клиент печатает
        let added_new_tickets = this.getElementsByClassName('new_tickets')[0]; // NEW уже добавлен?

        if (!added_new_tickets) {
          if (!admin_message && !typing) {
            $(this).find('.layout__media__ext:not([dir="ltr"])').prepend('<div class="new_tickets" style="margin-top: -14px;"><p style="color: rgb(255,61,0);font-weight: bold;font-size: 16px;">NEW</p></div>');
          }
        } else if (added_new_tickets && admin_message || typing) {
          $('.new_tickets').remove();
        }
      });
    }, 1000);


    // БОЛЬШЕ ШИРИНЫ ДЛЯ ПОЛОСКИ В ТИКЕТЕ С ЗАМЕТКОЙ ОТ АГЕНТА
    document.getElementsByClassName('myStyle')[0].innerHTML += '.js__inbox-list-item .conversation__list__item__summary .layout__media.o__center .o__admin-note:not([class*="typing"]) svg.interface-icon {width: 20px!important; height: 20px!important;} .js__inbox-list-item .conversation__list__item__summary .layout__media.o__center .o__admin-note:not([class*="typing"]) {width: 14px!important; padding: 0 5px!important;}';

    // ММЕНЬШЕ ОТСТУП У КНОПКИ NOTE и REPLY, ЧТОБЫ ПАНЕЛЬ С БЫСТРЫМИ ССЫЛКАМИ НЕ ПЕРЕХОДИЛА НА НОВУЮ СТРОКУ (ПРИ МАСШТАБЕ СТРАНИЦЫ В 90%)
    document.getElementsByClassName('myStyle')[0].innerHTML += ' [class*="current-conversation"] .tabs .o__in-pane-selector {margin-right: 15px!important;}';


    // ПРОВЕРКА НАЛИЧИЯ EMAIL И БЫСТРЫЕ ССЫЛКИ
    let quick_links_new = localStorage.getItem('quick_links_new'); // on - ссылки на новую админку, off - на старую
    if (quick_links_new === null) {
      localStorage.setItem('quick_links_new', 'on'); // Запись ключа quick_links_new в localStorage, если еще не записано
      quick_links_new = localStorage.getItem('quick_links_new');
    }

    var ok_dblclick = 0; // Клик по переключению быстрых ссылок выполнен, он будет перезаписываться
    var current_ticket; // Информация о текущей ссылке на тикет
    setInterval(function() {
      let open_ok;
      let $append_message = $('[class*="conversation-controls"] [class*="conversation-controls"].tabs'); // Путь вставки сообщения

      // Проверить открыт ли список "Details"
      $('[role="note"] span.profile-sidebar-section__section-title').each(function() {
        let open_val_email = $(this).text().trim();

        if (open_val_email === 'Details') {
          open_ok = $(this).parents('.profile-sidebar-section__header').find('span.u__ml__15.profile-sidebar-section__collapse__arrow.o__expanded').is('.o__expanded');
        }
      });

      let prof_search = $('.profile__sidebar-section').is('.profile__sidebar-section'); // Открылась ли панель с информ. о клиенте
      let selector_search = $('.profile__sidebar-section').find('[data-attribute-id="email"]').is('[data-attribute-id="email"]');
      let val_email = $('.profile__sidebar-section').find('[data-attribute-id="email"]').attr('data-value'); // Получить email клиента

      // Проверить, добавлены ли сообщения
      let text_added_open = document.getElementsByClassName('my_is_open_panel')[0];
      let text_added_email = document.getElementsByClassName('my_is_email')[0];
      let text_added_lincks = document.getElementsByClassName('my_quick_links')[0];

      // Добавить - Развернуть список "Details"
      if ((prof_search === true) && (selector_search === false)) {

        if ((val_email === undefined) && (text_added_open === undefined) && (open_ok === false)) {
          $('.my_is_email, .my_quick_links').remove();
          $append_message.append('<div class="my_is_open_panel tabs__discrete-tab" style="display: block; font-weight: 600; padding: 7px 0px 7px 0px;"><span style="color: crimson; font-size: 17px;">Развернуть список "Details"</span></div>');
        }
      }
      // Добавить - Запросить EMAIL клиента
      if ((val_email === undefined) && (text_added_email === undefined) && (open_ok === true)) {
        $('.my_is_open_panel, .my_quick_links').remove();
        $append_message.append('<div class="my_is_email tabs__discrete-tab" style="display: block; font-weight: 600; padding: 7px 0px 7px 0px; cursor: default;"><span style="color: crimson; font-size: 17px;">Запросить EMAIL клиента</span></div>');
      }
      // Добавить - быстрые ссылки на админку
      if ((open_ok === true) && (val_email !== undefined)) {

        $('.my_is_email, .my_is_open_panel').remove();

        // Обновить быстрые ссылки при выборе другого тикета
        let select_current_ticket = window.location.href;
        if (current_ticket !== select_current_ticket) {
          $('.my_quick_links').remove();
          current_ticket = select_current_ticket; // Записать текущую ссылку на тикет
        }

        if (text_added_lincks === undefined) {
          if (quick_links_new === 'on') {
            let admin_link = 'https://amd.platformalp.ru/';
            $append_message.append('<div class="my_quick_links tabs__discrete-tab" style="display: block; padding: 6px 0px 6px 0px; margin-right: 0px;"><span style="color: crimson; font-size: 10px;"><a class="style_hover" target="_blank" href="' + admin_link + '?link=domains&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">DOM</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=pages&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">СТР|SSL</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=contacts&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">КОНТ</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=bills&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">СЧЕТ</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=integrations&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">ИНТ</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=tasks&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">TASK</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=logs&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">LOG</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=errors&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">ERR</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=users&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">USER</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=leads&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">LEAD</a><a class="style_hover" target="_blank" href="' + admin_link + '?link=sms&email=' + val_email + '" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">SMS</a><a class="style_hover switch" style="margin-left: 10px; background-color: rgba(229, 55, 52, 0.2); color: black; -webkit-user-select: none; -moz-user-select: none;">С</a></span><style>.style_hover {text-decoration: none; padding: 10px 4px; border-radius: 15px 15px 15px 15px;} .style_hover:hover {background-color: rgba(200, 202, 204, 0.75); border-radius: 5px 5px 5px 5px;} .style_hover.switch:hover {background-color: rgba(229, 55, 52, 0.7)!important;}</style></div>');
          } else {
            val_email = val_email.replace('@', '%40');
            let admin_link = 'https://adm.platformalp.ru/?search=';
            $append_message.append('<div class="my_quick_links tabs__discrete-tab" style="display: block; padding: 6px 0px 6px 0px; margin-right: 0px;"><span style="color: crimson; font-size: 10px;"><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabDomains" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">DOM</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabPages" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">СТР</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabContacts" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">КОНТ</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabBills" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">СЧЕТ</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabInts" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">ИНТ</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabTasks" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">TASK</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabLogs" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">LOG</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabErrors" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">ERR</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabUsers" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">USER</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabCerts" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">SSL</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabLeads" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">LEAD</a><a class="style_hover" target="_blank" href="' + admin_link + val_email +'#tabSms" style="border-right: 2px solid rgba(159, 161, 163, 0.8);">SMS</a><a class="style_hover switch" style="margin-left: 10px; background-color: rgba(0, 200, 100, 0.2); -webkit-user-select: none; color: black; -moz-user-select: none;">Н</a></span><style>.style_hover {text-decoration: none; padding: 10px 4px; border-radius: 15px 15px 15px 15px;} .style_hover:hover {background-color: rgba(200, 202, 204, 0.75); border-radius: 5px 5px 5px 5px;} .style_hover.switch:hover {background-color: rgba(0, 200, 100, 0.7)!important;}</style></div>');
          }
        }
      }

      // Переключение быстрых ссылок на старую или новую админку
      $('.style_hover.switch').dblclick(function() {
        // Изменить значение ключа quick_links_new и перезаписать его
        if (ok_dblclick === 0) {

          ok_dblclick = 1;

          if (quick_links_new === 'on') {
            localStorage.setItem('quick_links_new', 'off');
            quick_links_new = localStorage.getItem('quick_links_new');
          } else {
            localStorage.setItem('quick_links_new', 'on');
            quick_links_new = localStorage.getItem('quick_links_new');
          }

          $('.my_quick_links').remove();

          setTimeout(function() {
            ok_dblclick = 0; // Перезапись разрешения клика
          }, 2000);
        }
      });
    }, 250);


    // ПАНЕЛЬ С КНОПКАМИ ОТЧЕТОВ
    setInterval(function() {
      if (intercom_respond !== -1) {
        var $header = $('.inbox__card__header');
        if ($header.length !== 1) return;

        // Сама панель
        var $panel = $('<div class="inbox__card__header o__center"></div>').css({
          background: 'white',
          padding: '1px',
          height: '30px',
          minHeight: '30px',
          borderWidth: '2px'
        }).insertAfter($header);

        var $btnUnsolved = $('<button class="btn o__secondary o__subtle" data-channel="unsolved">2. Не решено</button>').css({
          padding: '2px 2px',
          outline: 'none',
          marginLeft: '5px',
          borderWidth: '2px',
        }).appendTo($panel);

        var $btnOffer = $('<button class="btn o__secondary o__subtle" data-channel="offers">3. Идея</button>').css({
          padding: '2px 2px',
          outline: 'none',
          marginLeft: '5px',
          borderWidth: '2px',
        }).appendTo($panel);

        var $btnReview = $('<button class="btn o__secondary o__subtle" data-channel="reviews">4. Отзыв</button>').css({
          padding: '2px 2px',
          outline: 'none',
          marginLeft: '5px',
          borderWidth: '2px',
        }).appendTo($panel);

        var $btnSadness = $('<button class="btn o__secondary o__subtle" data-channel="sadness">5. Жалоба</button>').css({
          padding: '2px 2px',
          outline: 'none',
          marginLeft: '5px',
          borderWidth: '2px',
        }).appendTo($panel);

        if (users === '2line') {
          var $btnClose2line = $('<button class="btn o__secondary o__subtle u__right">На 2</button>').css({
            padding: '2px 2px',
            outline: 'none',
            borderWidth: '2px',
          }).appendTo($panel);
        } else {
          var $btnCloseCrash = $('<button class="btn o__secondary o__subtle u__right">8. Сбой</button>').css({
            padding: '2px 2px',
            outline: 'none',
            borderWidth: '2px',
          }).appendTo($panel);
        }

        if (users === '2line') {
          var $btnClose = $('<button class="btn o__secondary o__subtle u__right">0. На 1 линию</button>').css({
            padding: '2px 2px',
            outline: 'none',
            borderWidth: '2px',
          }).appendTo($panel);
        } else {
          var $btnClose = $('<button class="btn o__secondary o__subtle u__right">0. Закрыть</button>').css({
            padding: '2px 2px',
            outline: 'none',
            borderWidth: '2px',
          }).appendTo($panel);
        }

        // Текстовая панель и кнопки "Отправить отчет", "Скрыть"
        var $msg = $('<textarea class="f__text"></textarea>').css({
          margin: '5px 5px 0',
          // maxWidth: 'calc(100% - 20px)',
          maxWidth: '98%',
          background: '#FFF8EB',
          display: 'none'
        }).appendTo($panel);

        var $btnSend = $('<button class="btn o__primary">Отправить отчет</button>').css({
          margin: '3px 0 0 5px',
          padding: '2px 5px 2px',
          marginBottom: '2px',
          outline: 'none',
          display: 'none'
        }).appendTo($panel);

        var $btnCancel = $('<button class="btn o__secondary u__right">Скрыть</button>').css({
          margin: '3px 1% 0px 0px',
          padding: '2px 5px 2px',
          marginBottom: '2px',
          outline: 'none',
          display: 'none'
        }).appendTo($panel);

        // Действия кнопок
        $btnUnsolved.click(function(event) {
          if ($btnUnsolved.hasClass('active')) {
            $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', 'none'); // Скрыть панель ввода
            $btnCancel.click();
            return;
          }
          if ($btnUnsolved.siblings('[data-channel]').hasClass('active')) {
            $btnCancel.click();
            setTimeout(function () {
              $btnUnsolved.siblings('[data-channel]').hasClass('active');
              $btnUnsolved.click();
            }, 250);
            return;
          }
          $msg.val(getSelectedText().trim());
          $btnUnsolved.addClass('active');
          $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', ''); // Показать панель ввода
          $panel.css('height', 'auto');
          var height = $panel.outerHeight();
          $panel.css('height', 115);
          $panel.animate({
            'height': height
          }, 200, function () {
            $panel.css('height', 'auto');
          });
        });

        $btnOffer.click(function(event) {
          if ($btnOffer.hasClass('active')) {
            $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', 'none'); // Скрыть панель ввода
            $btnCancel.click();
            return;
          }

          if ($btnOffer.siblings('[data-channel]').hasClass('active')) {
            $btnCancel.click();
            setTimeout(function () {
              $btnOffer.click();
            }, 250);
            return;
          }

          $msg.val(getSelectedText().trim());

          $btnOffer.addClass('active');
          $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', ''); // Показать панель ввода
          $panel.css('height', 'auto');
          var height = $panel.outerHeight();
          $panel.css('height', 30);
          $panel.animate({
            'height': height
          }, 200, function () {
            $panel.css('height', 'auto');
          });
        });

        $btnReview.click(function(event) {
          if ($btnReview.hasClass('active')) {
            $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', 'none'); // Скрыть панель ввода
            $btnCancel.click();
            return;
          }

          if ($btnReview.siblings('[data-channel]').hasClass('active')) {
            $btnCancel.click();
            setTimeout(function () {
              $btnReview.click();
            }, 250);
            return;
          }

          $msg.val(getSelectedText().trim());

          $btnReview.addClass('active');
          $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', ''); // Показать панель ввода
          $panel.css('height', 'auto');
          var height = $panel.outerHeight();
          $panel.css('height', 30);
          $panel.animate({
            'height': height
          }, 200, function () {
            $panel.css('height', 'auto');
          });
        });

        $btnSadness.click(function(event) {
          if ($btnSadness.hasClass('active')) {
            $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', 'none'); // Скрыть панель ввода
            $btnCancel.click();
            return;
          }

          if ($btnSadness.siblings('[data-channel]').hasClass('active')) {
            $btnCancel.click();
            setTimeout(function () {
              $btnSadness.click();
            }, 250);
            return;
          }

          $msg.val(getSelectedText().trim());

          $btnSadness.addClass('active');
          $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', ''); // Показать панель ввода
          $panel.css('height', 'auto');
          var height = $panel.outerHeight();
          $panel.css('height', 30);
          $panel.animate({
            'height': height
          }, 200, function () {
            $panel.css('height', 'auto');
          });
        });

        // Увеличить минимальную высоту отчетов для корректного показа
        $($btnUnsolved).click(function() {
          if ($btnUnsolved.hasClass('active')) {
            $panel.css('min-height', '115px');
          } else {
            $panel.css('min-height', '30px');
          }
        });
        $($btnOffer).click(function() {
          if ($btnOffer.hasClass('active')) {
            $panel.css('min-height', '115px');
          } else {
            $panel.css('min-height', '30px');
          }
        });
        $($btnReview).click(function() {
          if ($btnReview.hasClass('active')) {
            $panel.css('min-height', '115px');
          } else {
            $panel.css('min-height', '30px');
          }
        });
        $($btnSadness).click(function() {
          if ($btnSadness.hasClass('active')) {
            $panel.css('min-height', '115px');
          } else {
            $panel.css('min-height', '30px');
          }
        });

        // Скрыть панель ввода по кнопке "Скрыть"
        $btnCancel.click(function() {
          $('.inbox__card__header.o__center textarea[class="f__text"], .inbox__card__header.o__center button[class="btn o__primary"], .inbox__card__header.o__center button[class="btn o__secondary u__right"]').css('display', 'none');
          $panel.css('min-height', '30px');
        });

        // Передача на сервер информации о "Не решено", "Идея", "Отзыв", "Жалоба"
        $btnSend.click(function () {
          var channel = $btnSend.siblings('button[data-channel].active').data('channel'); // Получить информацию об имени кнопки
          // console.log('Имя нажатой кнопки: ', channel);

          $btnSend.siblings('img').remove();

          // Передача для 1line, 2line
          var data = {
            version: vScript,
            ticket: location.href, // Ссылка на тикет
            name: name, // Имя агента
            channel: channel, // Имя кнопки
            msg: $msg.val().replace(/\s+/g, ' ').replace(/&/g, '!!AMPERSAND!!'), // Комментарий (выделенный текст в тикете или написанный вручную в панели)
          };
           console.log('Данные о версии, ссылке на тикет, имени агента, имени кнопки, количестве тикетов, комментарии: ', data);
          var path = btoa(unescape(encodeURIComponent(JSON.stringify(data))));  // Кодирование в знаки Юникода в шестнадцатиричном формате (base64 => UTF-8), то же самое, что data только закодировано для передачи на сервер
          console.log('Перекодировка: ', path);
          var $img = $('<img src="http://support.lpteam.ru/reporter.php/?data=' + path + '">');
          console.log('Так будет передано на сервер: ', $img);

          // Дополнительная передача для 2line (unsolved - не решено, sadness - жалоба)
          if (users === '2line') {
            // Переназначение имени кнопки
            if ((channel === 'unsolved') || (channel === 'sadness')) {
              // В качестве текста "Не решено"
              if (channel === 'unsolved') {
                var data = {
                  version: vScript,
                  ticket: location.href,  // Ссылка на тикет
                  name: name,  // Имя агента
                  channel: users,  // Имя кнопки
                  msg: 'Не решено',  // Текст, который будет отображаться в канале
                };
              }
              // В качестве текста "Жалоба"
              if (channel === 'sadness') {
                var data = {
                  version: vScript,
                  ticket: location.href,  // Ссылка на тикет
                  name: name,  // Имя агента
                  channel: users,  // Имя кнопки
                  msg: 'Жалоба',  // Текст, который будет отображаться в канале
                };
              }
              // console.log('Данные о версии, ссылке на тикет, имени агента, имени кнопки, количестве тикетов, комментарии (2line): ', data);
              var path = btoa(unescape(encodeURIComponent(JSON.stringify(data))));  // Кодирование в знаки Юникода в шестнадцатиричном формате (base64 => UTF-8), то же самое, что data только закодировано для передачи на сервер
              // console.log('Перекодировка (2line): ', path);
              var $img = $('<img src="http://support.lpteam.ru/reporter.php/?data=' + path + '">');
              // console.log('Так будет передано на сервер (2line): ', $img);
            }
          }

          // Стили для кнопки "Отправить отчет"
          $img.css('margin', '0 0 5px 5px');
          $img.insertAfter($btnSend);
          $img.on('load error', function () {
            if ($img.width() === 20) {
              setTimeout(function () {
                $msg.val('');  // Сбросить имеющийся комментарий
                $btnCancel.click();
              }, 1000);
            }
          });

          var position_scroll = $('.inbox__full-height .conversation__stream'); // Скролить к месту с которого был отправлен отчет
          // console.log('position_scroll: ', position_scroll);

          var scrollTop = position_scroll.scrollTop();  // Скролить к месту с которого был отправлен отчет
          // console.log('Значение scrollTop: ', scrollTop);

          var typeName = $btnSend.siblings('button[data-channel].active').text().substr(3);
          var note = '<b>' + typeName + '</b>';
          note += '<br>';
          note += $msg.val().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
          // console.log('Имя кнопки в комментарий: ', note);

          $('[class*="pane-selector"] a:nth-child(2)').click();  // Открыть комментарии в интеркоме
          $('.composer-box [contenteditable="true"]').children().html(note);  // Вставка текста
          setTimeout(function() {
            // Клик по "Добавить комментарий"
            $('button').filter(function () {
              return $(this).text().trim() === 'Add note';
            }, 100).click();

            // После чего скролим к последней позиции и кликаем обратно на Reply
            setTimeout(function() {
              $('.test__reply-pane').click();
              setTimeout(function() {
                position_scroll.scrollTop(scrollTop);
              }, 500);
            }, 1000);
          }, 10);
        });

        // Скрытие панели ввода данных отчета
        $btnCancel.click(function(event) {
          $btnCancel.siblings('[data-channel].active').removeClass('active');

          $btnCancel.siblings('img').remove();

          $panel.css('height', 'auto');
          var height = $panel.outerHeight();
          $panel.css('height', height);
          $panel.animate({
            'height': 30
          }, 200);
        });

        // Действия для закрытия тикета
        $btnClose.click(function(event) {
          closeAndSend('Первая линия');
        });
        if (users === '2line') {
          $btnClose2line.click(function(event) {
            closeAndSend('Вторая линия');
          });
        } else {
          $btnCloseCrash.click(function(event) {
            closeAndSend('Первая линия', true);
          });
        }

        // Передача на сервер при закрытии тикета
        function closeAndSend(channel, isCrash) {

          $btnCancel.click();  // Клик в панели по "Скрыть"

          if (users === '2line') {
            $('[class*="assignment-admin"] button').click();  // Клик вверху чата по кнопке "Передать тикет", назовем ее так

            function scrollMenu() { // Прокрутить "Пердать тикет" вниз
              if ($('[role="menu"] [role="menuitemcheckbox"]').length) {
                $('[role="menu"] [role="menuitemcheckbox"]').parents('[class*="o__main"]').scrollTop(1000000);
                setTimeout(function() {
                  closeTicket(channel);
                }, 60);
              } else {
                setTimeout(scrollMenu, 60);
              }
            };
            scrollMenu();

            // Закрытие тикета
            function closeTicket(channel) {

              /** // Сложный вариант передачи тикета на Первую/Вторую линию
              $('.pl_admin_selector span.avatar').filter(function () {
                return $(this).parent().contents().get(2).wholeText.indexOf(channel) >= 0;
              }).closest('.dropdown__list-item').click().closest('.o__dropdown').click();
              */

              // Упрощенный вариант передачи тикета на Первую/Вторую линию
              $('[role="menu"] [role="menuitemcheckbox"] [class*="assignee-selector"]').each(function() {
                var this_channel = $(this).text().trim();
                var channel_search = this_channel.search(channel);

                if (channel_search !== -1) {
                  $(this).click();
                  return false; // ДБез этого иногда тикет закрывался на себе
                }
              });

              // Дополнительная передача для 2line
              var data = {
                version: vScript,
                ticket: location.href,
                name: 'Закрытый тикет',
                channel: '2line',
                msg: name,
              };
               console.log('Закрытый тикет (2line): ', data);
              var path = btoa(unescape(encodeURIComponent(JSON.stringify(data))));
              console.log('Crash или Closed - передача на сервер: ', path);
              (new Image).src = support.lpteam.ru/reporter.php/?data=' + path;

              // Кнопка отвечающая за закрытие тикета
              $('[data-content="Close conversation"] button').click();
            };
          } else {
            var data = {
              version: vScript,
              ticket: location.href,
              name: isCrash ? 'Закрытый тикет со сбоем' : 'Закрытый тикет',
              channel: isCrash ? 'crash' : 'closed',
              msg: name,
            };
            // console.log('Crash или Closed: ', data);
            // console.log('Crash или Closed: ', data.channel);

            // Отправить отчет только в случае сбоя
            if (data.channel === 'crash') {
              var path = btoa(unescape(encodeURIComponent(JSON.stringify(data))));
              // console.log('Crash или Closed - передача на сервер: ', path);
              (new Image).src = 'http://support.lpteam.ru/reporter.php/?data=' + path;
            }

            $('[data-content="Close conversation"] button').click(); // Клик по "Закрыть тикет"
          }
        }
      }

      // Комбинации клавиш для кнопок в панели
      $(document).off('keypress.plp').on('keypress.plp', function (event) {
        if ($(document.activeElement).is('[contenteditable], input, textarea')) {
          // Если фокус в текстовом поле
          return;
        }

        // Пауза чтобы клавиша не вписывала ничего в текстовые поля
        setTimeout(function () {
          if (event.keyCode === 50) {
            $btnUnsolved.click();
          } else if (event.keyCode === 51) {
            $btnOffer.click();
          } else if (event.keyCode === 52) {
            $btnReview.click();
          } else if (event.keyCode === 53) {
            $btnSadness.click();
          } else if (event.keyCode === 48) {
            $btnClose.click();
            return;
          } else if (event.keyCode === 56) {
            $btnCloseCrash.click();
            return;
          } else {
            return;
          }

          var selected = getSelectedText().trim();
          if (selected.length) {
            $btnSend.click();
          }
        }, 10);
      });
    }, 1000);

    var css = '.btn.active {';
    css += 'background-color: #EEF2F7!important;';
    css += 'border-color: #98ABB7!important;';
    css += 'color: #586976!important;';
    css += 'box-shadow: 0 1px 3px 0 transparent,inset 0 1px 2px 0 rgba(0,0,0,.3)!important;';
    css += '}';
    $('body').append('<style>' + css + '</style>');
  }
}, 3000);

// ДЛЯ СТАРОЙ И НОВОЙ АДМИНОК
let admin_done = 0; // Инициализация скрипта в админке
let clickDone = 0; // Копирование в буфер обмена разрешено
setInterval(function() {
  if (admin_done === 0) {
    if (adm_platformalp !== -1 || amd_platformalp !== -1) {
      admin_done = 1; // Инициализация скрипта в админке завершена

      // Удаление пробелов в поле поиска и исправление не верно введенных команд поиска, таких как p: и s:
      if (adm_platformalp !== -1) { // Только если старая админка
        // Открыть тот раздел, который указан в ссылке
        let urlHash = window.location.hash;
        if (urlHash && urlHash !== '#tabDomains') {
          let idHach = urlHash.replace(/#/g, '');
          $('[role="tabpanel"] > [role="tablist"] > li.active, .tab-content > [role="tabpanel"].active, [role="presentation"].active, [role="tabpanel"].tab-pane.active').removeClass('active');
          $('[role="tabpanel"] > [role="tablist"] > li > a[href="' + urlHash + '"]').parents('li').addClass('active');
          $('#' + idHach).addClass('active');
          $('[role="tabpanel"].tab-pane > [role="tabpanel"] > [role="tablist"] > [role="presentation"] a[href="#task_status2"]').parents('[role="presentation"]').addClass('active');
          $('.tab-content > #task_status2').addClass('active');
        }


        // Валидация поля поиска
        $('input.form-control[name="search"]').change(function() {
          let value_input = $(this).val().replace(/ /g, '').replace(/P:/, 'p:').replace(/S:/, 's:');

          // Получение имени домена или поддомена
          let search_http = value_input.search(/http:/);
          let search_https = value_input.search(/https:/);
          if (search_http !== -1 || search_https !== -1) {
            value_input = new URL(value_input).hostname;
          }

          // Заменить значение в строке поиска
          $(this).val(value_input);
        });


        // БЫСТРЫЙ ПЕРЕХОД ИЗ СТАРОЙ АДМИНКИ В НОВУЮ С СОХРАНЕНИЕМ УЖЕ ОТКРЫТОГО РАЗДЕЛА
        $('.ng-scope > table.table > tbody > tr:nth-child(2) > td:nth-child(1)').prepend('<span class="newAdm" style="display: block; cursor: pointer; text-decoration-line: underline; text-decoration-color: blue; color: blue; font-size: 10px; height: 5px; width: max-content;">NEW ADM</span><br>');
        $('.newAdm').click(function() {
          let copyId = $('input[name="account_id"]').val(); // Получить id аккаунта
          let admSection = $('[role="tabpanel"] [role="tablist"] li.active a').attr('href'); // Получить имя активного раздела

          // Заменить значение переменной для быстрых ссылок в старую админку
          if (admSection === '#tabDomains')   admSection = 'domains';
          if (admSection === '#tabPages')     admSection = 'pages';
          if (admSection === '#tabContacts')  admSection = 'contacts';
          if (admSection === '#tabBills')     admSection = 'bills';
          if (admSection === '#tabInts')      admSection = 'integrations';
          if (admSection === '#tabTasks')     admSection = 'tasks';
          if (admSection === '#tabLogs')      admSection = 'logs';
          if (admSection === '#tabErrors')    admSection = 'errors';
          if (admSection === '#tabUsers')     admSection = 'users';
          if (admSection === '#tabCerts')     admSection = 'pages';
          if (admSection === '#tabLeads')     admSection = 'leads';
          if (admSection === '#tabSms')       admSection = 'sms';

          window.open("https://amd.platformalp.ru/accounts/" + copyId + "/" + admSection + "");
        });


        // В РАЗДЕЛЕ "ПОЛЬЗОВАТЕЛИ" ССЫЛКИ НА СМЕНУ ВЕРСИИ РЕДАКТОРА У ПОЛЬЗОВАТЕЛЬСКИХ АККАУНТОВ
        $('#tabUsers tbody tr').each(function() {
          let notDelete = $(this).find('td:nth-child(7)').text().trim(); // Проверка на то, что пользователь не удален

          if (notDelete !== 'да') {
            let accountId = $(this).find('td:nth-child(1)').text().trim(); // Получить id юзера
            $(this).find('td:nth-child(5)').append('<a class="lick_user_version_redactor" acid="' + accountId + '" href="https://adm.platformalp.ru/list/user/' + accountId + '" target="_blank" style="position: relative; left: 5px;"><i class="icon-export-1" style="position: relative; top: 2px; font-size: 120%;"></i></a>');
          }
        });


        // ФУНКЦИЯ БЫСТРОЙ СМЕНЫ ВЕРСИИ РЕДАКТОРА ДО ПОСЛЕДНЕЙ У ВСЕХ ПОЛЬЗОВАТЕЛЕЙ АККАУНТА
        $('#tabUsers H4').after('<div class="upgradeUser" style="display: block; position: relative; margin-left: 91.3%; margin-top: -3%; padding-bottom: 5px;"><button>Обновить всех</button></div>'); // Кнопка "Обновить всех" в разделе "Пользователи"
        $('.upgradeUser button').click(function() {
          let adminVersion = $('[ng-controller="accountCtrl"] > table.table >tbody > tr:nth-child(2)').find('td:nth-child(7)').text().trim(); // Версия основного аккаунта

          let userVersion = 0; // Версия у одного из пользователей больше, чем версия основного аккаунта
          let userVersionEachTemp; // Версия каждого пользователя, в результате userVersion должна получить самую новую версию
          let quantity = $('#tblUsers tbody tr').length; // Получить информацию о количествое юзеров в аккаунте
          let counter = 0; // Должно стать равным quantity, тогда будет позволен запуск фунции обновления

          $('#tblUsers tbody tr').each(function() { // Проверить версию каждого пользователя в аккаунте
            let userVersionEach = $(this).find('td:nth-child(5)').text().trim();
            userVersionEachTemp = userVersionEach;

            if (adminVersion < userVersionEach && userVersionEach >= userVersionEachTemp) {
              userVersion = userVersionEach;
            }

            counter++;

            if (quantity === counter) {
              UpgradeVersion(adminVersion, userVersion, quantity);
            }
          });

          // Когда наиболее новая версия найдена - обновить до самой новой версии всех юзеров, у кого версия более старая
          function UpgradeVersion(adminVersion, userVersion, quantity) {
            let counterUpgrade = 0; // Когда будет равно quantity, тогда обновить админку

            $('#tblUsers tbody tr').each(function() {
              let compareVersion = $(this).find('td:nth-child(5)').text().trim(); // Версия текущего юзера

              if (compareVersion < adminVersion || compareVersion < userVersion) {
                let userUrl = $(this).find('td:nth-child(5) .lick_user_version_redactor').attr('href'); // Получить ссылку на юзера с более старой версией

                if (userUrl) {

                  if (adminVersion > userVersion || userVersion === 0) { // В случае, если более новая версия указана у основного аккаунта
                    userUrl = userUrl + '?upgrade=' + adminVersion; // При помощи этой метки будет оперелено нужно ли закрывать страницу после выполнения скрипта
                  }
                  if (adminVersion < userVersion) { // В случае, если более новая версия указана у юзера
                    userUrl = userUrl + '?upgrade=' + userVersion;
                  }

                  window.open(userUrl);
                }
              }

              counterUpgrade++;

              if (counterUpgrade === quantity) {
                setTimeout(function() {
                  location.reload();
                }, 5000);
              }
            });
          }
        });

        // ОБНОВИТЬ ВЕРСИЮ ЮЗЕРА
        let urlUpgrade = window.location.search;
        if (urlUpgrade) {
          let isUpgrade = urlUpgrade.search(/upgrade/);

          if (isUpgrade !== -1) {
            urlUpgrade = urlUpgrade.replace('?upgrade=', '');
            $('[role="form"].form-horizontal input[name="redactor"]').val(urlUpgrade); // Вставить номер новой версии
            let commentVal = $('[role="form"].form-horizontal input[name="comment"]').val().replace(/ upgrade/g, ''); // Получить текущий комменатрий
            $('[role="form"].form-horizontal input[name="comment"]').val(commentVal + ' upgrade'); // Не удаляя текущий комментарий добаить метку о том, что upgrade был выполнен
            $('[role="form"] .text-center button[type="submit"]').click(); // Нажать на "Сохранить"
          }
        }

        // Закрыть вкладку после обновления версии
        let urlUpgradeDone = window.location.href;
        if (urlUpgradeDone) {
          let doneUpgrade = urlUpgradeDone.search(/\/list\/user\//g); // Определить, что это страница настроек юзера

          if (doneUpgrade !== -1) {
            let doneUpgrade = urlUpgradeDone.search(/\?/g); // Опеределить, что это страница настроек юзера, где какое-либо сохранение уже выполнено

            if (doneUpgrade !== -1) {
              let commentVal = $('[role="form"].form-horizontal input[name="comment"]').val();
              commentVal = commentVal.search(/ upgrade/g);

              let doneUpgradeCompleted = urlUpgradeDone.search(/upgrade/g); // Проверить, что в ссылке нет метки upgrade

              if (commentVal !== -1 && doneUpgradeCompleted === -1) {
                setTimeout(function() {
                  window.close();
                }, 2000);
              }
            } else {
              let commentVal = $('[role="form"].form-horizontal input[name="comment"]').val(); // Удалить метку upgrade в комментарии, если страница управления параметрами юзера не содержит знака вопроса
              commentVal = commentVal.replace(/ upgrade/g, '');
              $('[role="form"].form-horizontal input[name="comment"]').val(commentVal);
            }
          }
        }


        // Ссылки на Whois
        $('#tblDomains tbody tr td:nth-child(3)').each(function() {
          let decdomain = $(this).text();
          $(this).append('<a href="https://www.reg.ru/whois/?dname=' + decdomain + '" target="_blank">WHOIS</a>');
        });
        // Ссылки для перехода на тестовый поддомен
        $('#tblPages tbody tr td:nth-child(5)').each(function() {
          var subDomain = $(this).text();
          $(this).append('<a href="http://' + subDomain + '.plp7.ru" target="_blank"><i class="icon-export-1"></i></a>');
        });
        // Ссылки на редактор страницы
        $('#tblPages tbody tr td:nth-child(1)').each(function() {
          let pageId = $(this).find('a').text();
          $(this).append('<span> → </span><a href="https://app.platformalp.ru/#!/redactor/' + pageId + '" target="_blank">app</a>');
        });


        // Кнопка "Свернуть/Развернуть" все задачи
        let click_stat = 0;
        // Добавление кнопки "Свернуть/Развернуть"
        $('.tab-content #tabTasks .nav.nav-tabs[role="tablist"]').append('<li><button class="open_tasks" align="center" style="position: relative; display: block; height: 36px; width: 145px; margin-left: 556px; color: rgb(50,50,50); border: none;">Развернуть все задачи</button></li>');
        $('.tab-content #tabErrors').prepend('<button class="open_tasks" align="center" style="position: relative; display: block; height: 36px; width: 145px; margin-left: 995px; margin-top: -35px; top: 37px; color: rgb(50,50,50); border: none;">Развернуть все задачи</button>');
        // Реакция на клик
        $('.open_tasks').click(function() {
          if (click_stat === 0) {
            click_stat = 1;
            $('.tab-content #tabTasks td .niceblocktext:not(.toggle) div, .tab-content #tabErrors td .niceblocktext:not(.toggle) div').click(); // Развернуть
            $('.open_tasks').text('Свернуть все задачи');
          } else {
            click_stat = 0;
            $('.tab-content #tabTasks td .niceblocktext.toggle div, .tab-content #tabErrors td .niceblocktext.toggle div').click(); // Свернуть
            $('.open_tasks').text('Развернуть все задачи');
          }
        });
      } else { // Для новой админки
        // Подключить jQuery
        let jQueryAdd = document.createElement('script');
        jQueryAdd.src = "https://code.jquery.com/jquery-1.11.0.min.js";
        jQueryAdd.defer = "defer";
        document.head.appendChild(jQueryAdd);


        // Поиск аккаунта в новой админке
        document.getElementById('searchInput').onchange = function() {
          let input_value = this.value.replace(/ /g, '').replace(/P:/, 'p:').replace(/S:/, 's:');

          $('#searchPanel .myResult').remove(); // Стереть результаты поиска, если отображенные варианты были отображены скриптом

          // Получение имени домена или поддомена
          let search_http = input_value.search(/http:/);
          let search_https = input_value.search(/https:/);
          if (search_http !== -1 || search_https !== -1) {
            input_value = new URL(input_value).hostname;
          }

          // Получить токен
          let user_token = localStorage.getItem('access_token');

          // Получение id аккаунта
          let request_id = new XMLHttpRequest();
          request_id.open('GET', 'https://amd.platformalp.ru/api/search/' + input_value + '', true);
          request_id.setRequestHeader('X-Token', '' + user_token + '');
          request_id.onload = function() {

            /**
            var test = JSON.parse(request_id.response); // Один из возможных вариантов преобразования в массив
            console.log("test: ", test);
            var test1 = test.groups[3].items[0].account_id;
            console.log("test1: ", test1);
            */

            var accountArr = []; // Массив с id найденных аккаунтов

            // Поиск id аккаунтов и их запись в массив accountArr[]
            for (let i = 1; i < 21; i++) { // i = 1, потому что 0 (ноль) будет содержать цифру количества найденных вариантов, но не содержит id аккаунта
              let account_id_search = request_id.response.split(',"account_id":')[i];

              if (account_id_search) {
                account_id_search = account_id_search.split(',')[0]; // Получение id аккаунта

                accountArr[i-1] = account_id_search.replace(/\D/g, ''); //Добавление id аккаунта в массив, в переменной accountArr[i-1] минус один нужен, чтобы нумерация значений в массиве начиналась в нуля
                console.log("accountArr[i-1] (поиск по p:, доменному имени, email, логину (к примеру по sandergol)): ", accountArr[i-1]);
              } else if (!account_id_search) {
                account_id_search = request_id.response.split('[{"id":')[i]; // Получение id аккаунта в случае поиска по id аккаунта или по номеру счета

                if (account_id_search) {
                  account_id_search = account_id_search.split(',')[0];

                  accountArr[i-1] = account_id_search.replace(/\D/g, ''); //Добавление id аккаунта в массив, в переменной accountArr[i-1] минус один нужен, чтобы нумерация значений в массиве начиналась в нуля
                  console.log("accountArr[i-1] (поиск по p:, доменному имени, email, логину (к примеру по sandergol)): ", accountArr[i-1]);
                } else {
                  console.log('Количество найденных вариантов:', i - 1);
                  // console.log("accountArr: ", accountArr);
                  break;
                }
              }

            }

            // Поиск отличающихся значений в массиве accountArr[], если отличий нет, тогда перейти по ссылке с полученным id
            for (let i = 0; i < accountArr.length; i++) {

              if (accountArr[0] !== accountArr[i]) { // Сравнивается первое значение со всеми остальными в массиве
                console.log('Найденные id аккаунтов отличаются');
                $('#searchPanel form button.button').click(); // Кликнуть по кнопке "Найти" чтобы отобразились варианты выдачи аккаунтов
                break;
              } else if (i === (accountArr.length - 1)) {
                console.log('Найденные id аккаунтов НЕ отличаются');
                openAccount(accountArr[0]); // Выполнить переход в аккаунт
              }
            }

            function openAccount(accountArr) {
              if (accountArr) {
                // console.log('Будет открыт аккаунт id:', accountArr);
                window.location = 'https://amd.platformalp.ru/accounts/' + accountArr + ''; // Открыть в текущей вкладке
              }
            }
          };
          request_id.send(null);
        };

        // Для функции быстрых ссылок, работает на основе меток в ссылке
        // Метка "?link=" - это определение раздела админки
        // Метка "email=" - для отправки запроса по которому искать
        let option_url = location.search;
        let option_search_link = option_url.search(/\?link=/);

        if (option_search_link !== -1) {
          let url_split = option_url.replace('%40', '@').replace('?link=', '').replace('email=', '').split('&');

          let value_link = url_split[0]; // Определяет какой раздел будет открыт
          let value_email = url_split[1]; // Определяет email клиента для поиска в базе

          // Получить токен
          let user_token = localStorage.getItem('access_token');

          // Получение id аккаунта
          let request_id = new XMLHttpRequest();
          request_id.open('GET', 'https://amd.platformalp.ru/api/search/' + value_email + '', true);
          request_id.setRequestHeader('X-Token', '' + user_token + '');
          request_id.onload = function() {
            // let account_id = request_id.response.split('[{"id":')[1].split(',')[0]; // id аккаунта
            // window.location = 'https://amd.platformalp.ru/accounts/' + account_id + '/' + value_link + ''; // Открыть в текущей вкладке

            var accountArr = []; // Массив с id найденных аккаунтов

            // Поиск id аккаунтов и их запись в массив accountArr[]
            for (let i = 1; i < 21; i++) { // i = 1, потому что 0 (ноль) будет содержать цифру количества найденных вариантов, но не содержит id аккаунта
              let account_id_search = request_id.response.split(',"account_id":')[i];

              if (account_id_search) {
                account_id_search = account_id_search.split(',')[0]; // Получение id аккаунта

                accountArr[i-1] = account_id_search.replace(/\D/g, ''); //Добавление id аккаунта в массив, в переменной accountArr[i-1] минус один нужен, чтобы нумерация значений в массиве начиналась в нуля
                console.log("accountArr[i-1] (поиск по p:, доменному имени, email, логину (к примеру по sandergol)): ", accountArr[i-1]);
              } else if (!account_id_search) {
                account_id_search = request_id.response.split('[{"id":')[i]; // Получение id аккаунта в случае поиска по id аккаунта или по номеру счета

                if (account_id_search) {
                  account_id_search = account_id_search.split(',')[0];

                  accountArr[i-1] = account_id_search.replace(/\D/g, ''); //Добавление id аккаунта в массив, в переменной accountArr[i-1] минус один нужен, чтобы нумерация значений в массиве начиналась в нуля
                  console.log("accountArr[i-1] (поиск по p:, доменному имени, email, логину (к примеру по sandergol)): ", accountArr[i-1]);
                } else {
                  console.log('Количество найденных вариантов:', i - 1);
                  // console.log("accountArr: ", accountArr);
                  break;
                }
              }

            }

            // Поиск отличающихся значений в массиве accountArr[], если отличий нет, тогда перейти по ссылке с полученным id
            for (let i = 0; i < accountArr.length; i++) {

              if (accountArr[0] !== accountArr[i]) { // Сравнивается первое значение со всеми остальными в массиве
                console.log('Найденные id аккаунтов отличаются');

                // Добавление в окно поиска найденных аккаунтов, за пример взят hakamada.project@gmail.com
                $('#app #searchPanel').css('display', '');
                $('#app #searchPanel .searchResults').append('<ul class="myResult"></ul>');

                for (let count = 0; count < accountArr.length; count++) {
                  $('#app #searchPanel .searchResults ul').append('<li><a href="/accounts/' + accountArr[count] + '/users" class=""><i class="ti-user"></i>  Аккаунт:  ' + accountArr[count] + '</a></li>');
                }

                $('#app #searchPanel .searchResults').append('<p class="myResult" style="font-size: 20px; font-weight: 600; color: black;">Среди найденных id аккаунтов, один из полученных id может являться айдишником пользователя, но не аккаунта. Это значит, что один из пользователей в каком-то из аккаунтов имеет такой же id, как и у основного аккаунта, то есть один и тот же id у пользователя и у аккаунта совпадают.</p>');

                break;
              } else if (i === (accountArr.length - 1)) {
                console.log('Найденные id аккаунтов НЕ отличаются');
                openAccount(accountArr[0]); // Выполнить переход в аккаунт
              }
            }

            function openAccount(accountArr) {
              if (accountArr) {
                // console.log('Будет открыт аккаунт id:', accountArr);
                window.location = 'https://amd.platformalp.ru/accounts/' + accountArr + '/' + value_link + ''; // Открыть в текущей вкладке
              }
            }
          };
          request_id.send(null);
        } else { // Для функция подсветки с какого раздела пишет клиент

          // Метка "?page=" - для отправки запроса по которому искать
          // Метка "section=" - это определение раздела админки
          let option_search_page = option_url.search(/\?page=/);

          if (option_search_page !== -1) {
            let url_split = option_url.replace('?page=', '').replace('section=', '').split('&');

            let value_page = url_split[0]; // Определяет id страницы клиента для поиска в базе
            console.log('value_page:', value_page);
            let value_section = url_split[1]; // Определяет какой раздел будет открыт
            console.log('value_section:', value_section);

            // Получить токен
            let user_token = localStorage.getItem('access_token');

            // Получение id аккаунта
            let request_id = new XMLHttpRequest();
            request_id.open('GET', 'https://amd.platformalp.ru/api/search/p:' + value_page + '', true);
            request_id.setRequestHeader('X-Token', '' + user_token + '');
            request_id.onload = function() {
                let account_id = request_id.response.split('[{"id":')[1].split(',')[0]; // id аккаунта
                window.location = 'https://amd.platformalp.ru/accounts/' + account_id + '/' + value_section + '/?p=' + value_page + ''; // Открыть в текущей вкладке
            };
            request_id.send(null);
          } else {
            // Метка "?p=" - означает, что итоговый адрес страницы на админку клиента уже открыт и можно скопировать в буфер обмена id страницы
            let search_page_id = option_url.search(/\?p=/);

            if (search_page_id !== -1) {
              let pageId = option_url.replace('?p=', '');

              // Скопировать id страницы в буфер обмена, если был двойной клик по свободной части в левой панели
              function searchIdleftbar() {
                if (document.querySelector('#leftbar')) { // #leftbar может появитья после того как начнет выполняться эта часть кода
                  document.getElementById('leftbar').ondblclick = function() {
                    if (clickDone === 0) {
                      leftbar.innerHTML += '<input id="myInputPaste" type="text" value="Temp">';
                      myInputPaste.value = pageId;
                      myInputPaste.select();
                      document.execCommand("copy");
                      myInputPaste.remove();
                      clickDone = 1;
                    }
                  };
                } else {
                  setTimeout(searchIdleftbar, 500);
                }
              }
              searchIdleftbar();
            }
          }
        }


        // УКРАШАТЕЛЬСТВА ДЛЯ НОВОЙ АДМИНКИ
        var myStyle = document.createElement('style');
        myStyle.className = 'myStyle';
        myStyle.innerHTML = '.ti-pencil-alt {color: rgb(0,200,100)!important;}'; // Зеленый цвет значков редактора
        myStyle.innerHTML += '.ti-cloud-up {color: red!important;}'; // Красный цвет значков публикации
        myStyle.innerHTML += '.ti-new-window.small {color: blue!important; font-size: 90%!important;}'; // Цвет значков со ссылкой на страницу
        myStyle.innerHTML += 'tbody tr td:nth-child(2) {white-space: normal!important;} .pop table.hover {box-sizing: content-box!important;}'; // Показать полное имя страницы на тестовом поддомене
        myStyle.innerHTML += 'table tbody.datatable-collections table.datatable-resultset td.datatable-cell:nth-child(3) span {white-space: normal!important;} table tbody.datatable-collections table.datatable-resultset td.datatable-cell:nth-child(4) span {white-space: normal!important;}'; // Полное отображение текста в ошибках
        myStyle.innerHTML += 'tbody tr td:nth-child(6) div.small {font-size: 90%!important;}'; // Немого увеличенный размер номеров телефона, чтобы зрение не портить
        myStyle.innerHTML += 'td.datatable-cell:nth-child(6) {white-space: normal!important;}'; // Отображение описания ошибок в задачах без скрытия части текста
        myStyle.innerHTML += '.block.account-header > .cell:nth-child(1) > small {cursor: pointer!important; text-decoration-line: underline!important; text-decoration-color: blue!important; color: blue!important; font-size: 16px!important;}'; // Для блока с характеристиками аккаунта, делает ID больше и в виде ссылки
        myStyle.innerHTML += '[title="Click to sort. Drag to center to group."] {z-index: 1;}'; // Для показа заголовков колонок поверх элементов в колонках
        document.head.appendChild(myStyle);


        // ДОЖДАТЬСЯ ЗАГРУЗКИ jQuery
        function defer() {
          if (window.jQuery) {
            method();
            // console.log("jQuery is loaded");
          } else {
            setTimeout(function() { 
              defer();
            }, 50);
            // console.log("jQuery has not loaded");
          }
        }
        defer();


        // ВЫПОЛНИТЬ ПОСЛЕ ЗАГРУЗКИ jQuery
        function method() {
          // БЫСТРЫЙ ПЕРЕХОД ИЗ НОВОЙ АДМИНКИ В СТАРУЮ С СОХРАНЕНИЕМ УЖЕ ОТКРЫТОГО РАЗДЕЛА
          $('.block.account-header > .cell:nth-child(1) > small').click(function() {
            let copyId = $('.block.account-header > .cell:nth-child(1) > p').text().trim(); // Получить id аккаунта
            let admSection = $('.cell .tabs .tabs-title.is-active a').attr('href'); // Получить имя активного раздела

            if (admSection) admSection = admSection.replace(/\//g, '').replace('accounts', '').replace(copyId, ''); // Оставить только имя активного раздела
            else admSection = '';

            // Заменить значение переменной для быстрых ссылок в старую админку
            if (admSection === 'domains')       admSection = '';
            if (admSection === 'pages')         admSection = '#tabPages';
            if (admSection === 'tasks')         admSection = '#tabTasks';
            if (admSection === 'contacts')      admSection = '#tabContacts';
            if (admSection === 'bills')         admSection = '#tabBills';
            if (admSection === 'integrations')  admSection = '#tabInts';
            if (admSection === 'users')         admSection = '#tabUsers';
            if (admSection === 'logs')          admSection = '#tabLogs';
            if (admSection === 'errors')        admSection = '#tabErrors';
            if (admSection === 'leads')         admSection = '#tabLeads';
            if (admSection === 'sms')           admSection = '#tabSms';

            window.open("https://adm.platformalp.ru/account/index?search=" + copyId + admSection + "");
          });


          // ФУНЦИЯ МАССОВОГО ОБНОВЛЕНИЯ СТРАНИЦ
          setInterval(function() {
            let selectedSection = $('div.cell ul.tabs li.tabs-title.is-active').find('a').text().trim();
            let isPages = selectedSection.search('Страницы');
            let clickCounter = 0; // Разрешение на добавление обработчика клика

            if (isPages !== -1) {
              let isAddMyButton = $('.tabs-content > .pop > .button-bar .manualUpdate').is('.manualUpdate'); // Кнопка уже добавлена?
              if (!isAddMyButton) {
                $('div.tabs-content div.pop div.grid-x.small.button-bar').append('<div class="manualUpdate" style="margin: 0px 0px 0px 3em;"><button class="button">Обновить все страницы</button></div>');

                if (clickCounter === 0) {
                  clickCounter = 1; // Добавлние обработчика запрещено
                  // Выполнить обновление при клике на кнопку "manualUpdate"
                  $('.manualUpdate button').click(function() {
                    $('div.pop div[filter] tbody tr:first-child').addClass('first'); // Добавить класс, чтобы указать, что здесь нет нужной кнопки

                    let numberOfPages = $('div.pop div[filter] tbody tr:not(.first)').find('td:nth-child(8)').find('div.button-group i.ti-export').length; // Количество страниц
                    console.log('Количество страниц, которые обновляются: ', numberOfPages);

                    let counter = 0;

                    $('div.pop div[filter] tbody tr:not(.first)').each(function() {
                      $(this).find('td:nth-child(8)').find('div.button-group i.ti-export').parents('button').click();

                      counter++;

                      if (counter === 1) {
                        // Добавить фон с z-index больше чем у других фонов, чтобы нельзя было закрыть уведомления о запуске задачи обновления страницы, а  также отобразить окно прогресса
                        $('body').append('<div class="vex-overlay myBackground closed" style="z-index: 99999999;"><div style="position: absolute; display: block; background-color: antiquewhite; width: 400px; height: 100px; left: 35%; top: 30%; box-shadow: 0 0 150px rgb(0,0,0); border-radius: 10px;"><p class="allPage" style="font-size: 22px; margin-left: 8%;"><span>Всего страниц обновляется: </span><span style="font-weight: 900; font-size: 25px;">' + numberOfPages + '</span></p><p class="processPage" style="font-size: 27px; margin-left: 8%;"><span>Всего обновлено: </span><span style="font-weight: 900; font-size: 25px; color: red;">0</span></p></div></div>');
                      }

                      if (numberOfPages === counter) {
                        counter = 0; // Сбросить счетчик, теперь он говорит о количестве закрытых фонов после обновления страниц

                        function searchForOkButton() {
                          if ($('div[class*="vex-theme-plain"]').length) {
                            let foundWindows = $('div[class*="vex-theme-plain"]').length; // Количество найденных уведомлений о запуске задачи
                            console.log('Количество найденных окон об успешном запуске задачи: ', foundWindows);

                            // Добавить информацию о количестве обновленных страница в окно прогресса
                            $('.processPage span:nth-child(2)').text(foundWindows);

                            setTimeout(function() {
                              if (foundWindows !== numberOfPages) {
                                searchForOkButton(); // Проверять количество уведомлений о запуске задачи до тех пор, пока оно не станет равным количеству страниц
                              } else {
                                $('div[class*="vex-theme-plain"]').each(function() {
                                  if ($('div[class*="vex-theme-plain"]').length) {
                                    $(this).find('button.vex-first').click();

                                    counter++;

                                    if (numberOfPages === counter) {
                                      $('.myBackground.closed').remove(); // Удалить перекрывающий фон
                                      $('body').append('<div class="vex-overlay myBackground"></div><div class="vex vex-theme-plain myBackground"><div class="vex-content"><form class="vex-dialog-form"><div class="vex-dialog-message" style="font-size: 200%;">Обновление страниц запущено</div><div class="vex-dialog-input"></div><div class="vex-dialog-buttons"><div class="close" style="background: #3288e6; color: #fff; border-radius: 0; border: 0; float: right; margin: 0 0 0 .5em; font-family: inherit; text-transform: uppercase; letter-spacing: .1em; font-size: .8em; line-height: 1em; padding: .75em 2em; text-rendering: optimizeLegibility; -webkit-appearance: none; -moz-appearance: none; appearance: none; cursor: pointer; -webkit-tap-highlight-color: transparent;">Закрыть</div><div class="task" style="position: relative; right: 20px; background: #3288e6; color: #fff; border-radius: 0; border: 0; float: right; margin: 0 0 0 .5em; font-family: inherit; text-transform: uppercase; letter-spacing: .1em; font-size: .8em; line-height: 1em; padding: .75em 2em; text-rendering: optimizeLegibility; -webkit-appearance: none; -moz-appearance: none; appearance: none; cursor: pointer; -webkit-tap-highlight-color: transparent;">Посмотреть в задачах</div></div></form></div></div>');

                                      $('div[class*="task"]').click(function() {

                                        let currentUrl = window.location.href;
                                        currentUrl = currentUrl.replace(/pages/g, 'tasks');
                                        window.location.href = currentUrl;
                                      });

                                      $('div[class*="close"]').click(function() {
                                        $('.myBackground').remove();
                                      });
                                    }
                                  }
                                });
                              }
                            }, 2000);
                          } else {
                            setTimeout(searchForOkButton, 1000);
                          }
                        };
                        searchForOkButton();
                      }
                    });
                  });
                }
              }
            } else {
              $('.manualUpdate').remove();
            }
          }, 500);


          // WHIS В НОВОЙ АДМИНКЕ
          setInterval(function() {

            let zeroLink; // Проверить, что в панели есть страницы
            $('.pop .button-bar .button').each(function() {
              let noZero = +$(this).text().replace(/\D/g, '');
              if (noZero !== 0) {
                zeroLink = noZero;
              }
            });

            if (zeroLink) {
              $('[colspan="7"]').each(function() {
                let isDecdomain = $(this).find('.decdomain').is('.decdomain'); // Проверка на наличие уже добавленной ссылки на WHOIS

                if (!isDecdomain) {
                  let decdomain = $(this).text().trim(); // Получить имя домена

                  if (decdomain !== 'без домена') {
                    $(this).append('<a class="decdomain" href="https://www.reg.ru/whois/?dname=' + decdomain + '" target="_blank" style="position: relative; left: 25px; text-decoration: underline; color: red; font-weight: bold;">WHOIS</a>');
                  } else {
                    let isDecdomain2 = $(this).parents('tbody').find('.decdomain').is('.decdomain'); // Проверка на наличие уже добавленной ссылок на WHOIS в категории "Без домена"

                    if (!isDecdomain2) {
                      $(this).parents('tbody').find('td:nth-child(4) a[href]').each(function() {
                        let url = $(this).attr('href'); // Получить url в "Без домена"
                        let isPlp7 = url.search(/plp7.ru/g); // Убедиться, что это ссылка на свой домен

                        if (isPlp7 === -1) {
                          url = new URL(url).hostname; // Получить имя домена без подпапок
                          $(this).parents('td').append('<a class="decdomain" href="https://www.reg.ru/whois/?dname=' + url + '" target="_blank" style="position: relative; left: 10px; text-decoration: underline; color: red; font-weight: bold;">WHOIS</a>');;
                        }
                      });
                    } else {
                      // Удалить ссылку на WHOIS, если ссылка указанная в WHIS не совпадает со ссылкой страницы
                      $(this).parents('tbody').find('td:nth-child(4)').each(function() {
                        let urlChange = $(this).find('a[href]:not(.decdomain)').attr('href'); // Получить указанную ссылку на страницу в админке
                        let isPlp7Cange = urlChange.search(/plp7.ru/g); // Убедиться, что ссылка указанна на собственный домен

                        if (isPlp7Cange === -1) {
                          urlChange = new URL(urlChange).hostname; // Получить имя домена

                          let modifyUrl = $(this).find('a.decdomain').attr('href');
                          if (modifyUrl) {
                            modifyUrl = new URL(modifyUrl).search.replace('?dname=', ''); // Получить ссылку указанную в WHOIS

                            // Если ссылка указанная в админке не совпадает со ссылкой указанной в WHOIS - удалить
                            if (urlChange !== modifyUrl) {
                              $('a.decdomain').remove();
                            }
                          }
                        }
                      });
                    }
                  }
                }
              });
            }


            // В РАЗДЕЛЕ "ПОЛЬЗОВАТЕЛИ" ССЫЛКИ НА СМЕНУ ВЕРСИИ РЕДАКТОРА У ПОЛЬЗОВАТЕЛЬСКИХ АККАУНТОВ ЧЕРЕЗ СТАРУЮ АДМИНКУ
            let isUser = $('.tabs .tabs-title.is-active a').text().trim();
            if (isUser === 'Пользователи') {
              $('[colspan="8"] tr').each(function() {
                let notDelete = $(this).find('td:nth-child(7) i.ti-line-dotted').is('i.ti-line-dotted'); // Проверка на то, что пользователь не удален
                let lincDone = $(this).find('a.lick_user_version_redactor').is('.lick_user_version_redactor'); // Проверить добавлена ли уже ссылка

                if (notDelete) {
                  let accountId = $(this).find('td:nth-child(1) span').text().trim(); // Получить id юзера

                  if (lincDone) {
                    let acId = $(this).find('a.lick_user_version_redactor').attr('acid'); // Получить id из атрибута в добавленной ссылке

                    if (accountId !== acId) {
                      $(this).find('a.lick_user_version_redactor').remove(); // Если полученный id пользователя не равен id добавленному в ссылку - удалить
                      $(this).find('td:nth-child(5)').append('<a class="lick_user_version_redactor" acid="' + accountId + '" href="https://adm.platformalp.ru/list/user/' + accountId + '" target="_blank" style="position: relative; left: 5px;"><i class="ti-new-window small"></i></a>');
                    } 
                  } else {
                    $(this).find('td:nth-child(5)').append('<a class="lick_user_version_redactor" acid="' + accountId + '" href="https://adm.platformalp.ru/list/user/' + accountId + '" target="_blank" style="position: relative; left: 5px;"><i class="ti-new-window small"></i></a>');
                  }
                } else {
                  if (lincDone) {
                    $(this).find('a.lick_user_version_redactor').remove(); // Если полученный id пользователя не равен id добавленному в ссылку - удалить
                  }
                }
              });
            }
          }, 500);
        }
      }
    }
  }
}, 250);
